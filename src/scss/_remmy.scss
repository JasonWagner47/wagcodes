/*
$total_cols : 0 !global;
$grid-nth-omega : 0;

$base-font-size : 16px;
$grid-gutter: 0;
$grid-padding: 0;
$grid-column-width : 0;
$grid-type : magic;

$breaks : ($total_cols);
*/

*, *:before, *:after {
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin container() {
	$break : nth($breakpoints, length($breakpoints));
	$break : nth($break, 2) * $grid-column-width;

	@if $grid-type == magic {
		max-width: $break;
	}

	@else if $grid-type == fluid {
		max-width: 100%;
	}

	@else if $grid-type == static {
		@for $i from 1 through length($breakpoints) {
			$break : nth($breakpoints, $i);
			$total_cols : nth($break, 2);
			@media only screen and (min-width: $total_cols * parseInt($grid-column-width) * $base-font-size) {
				max-width: $total_cols * $grid-column-width;
			}
		}
	}

	margin-left: auto;
	margin-right: auto;

	&:after {
		clear: both;
		display: table;
		height: 0;
		overflow: hidden;
		content: '';
	}
}

@mixin breakpoint($n) {
	@for $i from 1 through length($breakpoints) {
		$break : nth($breakpoints, $i);
		@if nth($break, 1) == $n {
			$total_cols : nth($break, 2) !global;
		}
	}

	@media only screen and (min-width: $total_cols * parseInt($grid-column-width) * $base-font-size) {
		@content;
	}
}

@mixin cols($cols, $reference:$total_cols) {
	$omega : null;

	@if (length($cols) == 2) {
		$omega : nth($cols, 2);
		$cols : nth($cols, 1);
	}

	@include x_cols(width, $cols, $reference);

	@if $omega == omega {
		float: right;
		margin-right: 0;
	} @else {
		margin-right : $grid-gutter;
		float: left;
	}
}

@mixin x_cols($m, $cols, $reference:$total_cols) {
	$omega : null;

	@if (length($cols) == 2) {
		$omega : nth($cols, 2);
		$cols : nth($cols, 1);
	}

	#{$m} : -webkit-calc( (#{$cols} / #{$reference} * 100%) - #{$grid-gutter} + (#{$cols} / #{$reference} * #{$grid-gutter}));
	#{$m} : -moz-calc( (#{$cols} / #{$reference} * 100%) - #{$grid-gutter} + (#{$cols} / #{$reference} * #{$grid-gutter}));
	#{$m} : -o-calc( (#{$cols} / #{$reference} * 100%) - #{$grid-gutter} + (#{$cols} / #{$reference} * #{$grid-gutter}));
	#{$m} : calc( (#{$cols} / #{$reference} * 100%) - #{$grid-gutter} + (#{$cols} / #{$reference} * #{$grid-gutter}));
}

@mixin pre($cols, $reference:$total_cols) {
	margin-left : calc((#{$cols} / #{$reference} * 100%) + (#{$cols} / #{$reference} * #{$grid-gutter}));
}

@mixin post($cols, $reference:$total_cols) {
	margin-right : calc((#{$cols} / #{$reference} * 100%) + #{$grid-gutter} + (#{$cols} / #{$reference} * #{$grid-gutter}));
}

@mixin omega($n:null) {
	@if $n == null {
		float: right;
		margin-right: 0;
	} @else {
		&:nth-child(#{$grid-nth-omega}) {
			float: left;
			margin-right: $grid-gutter;
		}

		&:nth-child(#{$n}) {
			margin-right: 0;
			float: right;
		}

		$grid-nth-omega : $n;
	}
}